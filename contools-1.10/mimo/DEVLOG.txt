MIMO development log

$ python ./manage.py startpap mimo

- Created the models in models.py
- Importing mimo/urls.py
- Added memo to INSTALLED_APPS
- Registered models with admin.py
- Added placeholder views in views.py
- Added placeholder URLs in urls.py

$ python ./manage.py makemigrations mimo
$ python ./manage.py migrate mimo
$ python /.manage.py runserver

Can now edit the admin elements and view the (dummy) views through URLS:
http://localhost:8000/mimo/plan/
http://localhost:8000/mimo/mi/
http://localhost:8000/mimo/live/
http://localhost:8000/mimo/mo/

Let’s have some operations for:
- Changing the mode.
- Changing the current crate.

Turns out I need blank=True to allow blank foreign keys - NULL is only used to determine how such non-references are represented in the database. So:

$ python ./manage.py makemigrations mimo
$ python ./manage.py migrate mimo

Add mimo/templates/mimo and some basic files, and populate the first view.
Change Settings to use a Manager to return settings().

I’ve set up basic index/detail views.

I should namespace the URLs, by adding

app_name = ‘mimo’

and using ‘mimo:index’ instead of ‘index’ in url tags. And do the same for steampunk.

Don’t really want to use class-based views for add/update/delete for Move In/Live/Move Out - instead, there’ll be more custom operations.

For the Index display, we want something similar to a spreadsheet:
- Collect them by group.
- One item per row, columns are the details.
- Can insert a new row via AJAX, typing directly into the fields in-place.
- We probably want to be filtering by Supplier, too. cf tabs on a spreadsheet.
	
So the “PlanItem” CreateView makes no sense - that relies on existing TechItems - it doesn’t create new TechItems. Instead, we want to create a new TechItem which also creates the appropriate higher-level item according to the mode.

I have the link in the index view go to plan_detail; it should go to the edit mode,
but I don’t have that form yet.

Realised that the Settings should be recording the defaults for all fields in a
TechItem, and that those defaults should really be the last entered, so added more
fields to Settings, then created a migration for it. Also moved all the Settings
stuff to later in models.py, because it now references a lot more models.

Thinking now about MOVE IN, but I’m not sure how to do it.
- For Plan, I’m showing all the Plan items;
- For Move In, I’m showing all the MoveIn items, which is none.
How to set up all the Move-In items? Have an actual setup operation?
I’ve decided to have a copy operation that sets up all the MoveIn items if there
aren’t any there.

So we want to be able to add new items that are replacements for an existing one.
Let’s go to a page where you can add a new one, and others.

My previous thoughts - which I’d forgotten about - had a two-column display: planned
items on the left, received items on the right, with operations to move across from left to right to indicate receipt or replacement with other things.

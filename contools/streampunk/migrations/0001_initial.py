# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-09-07 12:40
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import streampunk.models

def make_default_EnumTable(apps, schema_editor, cls):
  model = apps.get_model("streampunk", cls)
  obj = model(name='TBA', gridOrder=0, isUndefined=True, isDefault=True)
  obj.save()

def make_default_KitRole(apps, schema_editor): make_default_EnumTable(apps, schema_editor, 'KitRole')
def make_default_KitSource(apps, schema_editor): make_default_EnumTable(apps, schema_editor, 'KitSource')

def make_default_ConInfoBool(apps, schema_editor):
  vars = [ ( 'show_shortname', 'Show shortnames', True ),
           ( 'rooms_across_top', 'Rooms axross top on grids', False ),
           ( 'no_avail_means_always_avail', "No availability means 'always available'", True ) ]
  model = apps.get_model("streampunk", "ConInfoBool")
  for (vvar, vname, vval) in vars:
    model(var=vvar, name=vname, val=vval)

def make_default_ConInfoInt(apps, schema_editor):
  vars = [ ( 'max_items_per_day', 'Max items per day for a person', 4 ),
           ( 'max_items_whole_con', 'Max items for a person across the whole con', 12 ),
           ( 'max_consecutive_items', "Max consecutive items for a person", 2 ) ]
  model = apps.get_model("streampunk", "ConInfoInt")
  for (vvar, vname, vval) in vars:
    model(var=vvar, name=vname, val=vval)

def make_default_ConInfoString(apps, schema_editor):
  vars = [ ( 'con_name', 'Convention name', "MyCon 2012" ),
           ( 'email_from', "Email 'From' address", "steve@whitecrow.demon.co.uk" ),
           ( 'con_logo_image_file', "Con Logo image file", "logobanner.jpg" ),
           ( 'con_logo_image_url_name', "Con Logo image URL", "logobanner.jpg" ) ]
  model = apps.get_model("streampunk", "ConInfoString")
  for (vvar, vname, vval) in vars:
    model(var=vvar, name=vname, val=vval)


   

def make_default_CheckResult(apps, schema_editor):
  model = apps.get_model("streampunk", "CheckResult")
  model(name='Item List',     gridOrder=20,  isUndefined=False, isDefault=True,  description="Check returns a list of program items").save()
  model(name='Person List',   gridOrder=30,  isUndefined=False, isDefault=False, description="Check returns a list of people").save()
  model(name='Mixed Tuple',   gridOrder=40,  isUndefined=False, isDefault=False, description="Check returns a list of tuples, each of which contains mixed object kinds").save()
  model(name='Room List',     gridOrder=40,  isUndefined=False, isDefault=False, description="Check returns a list of rooms").save()
  model(name='KitThing List', gridOrder=40,  isUndefined=False, isDefault=False, description="Check returns a list of kit things").save()
  model(name='TBA',           gridOrder=100, isUndefined=True,  isDefault=False).save()

def make_default_Check(apps, schema_editor):
  cr = apps.get_model("streampunk", "CheckResult")
  plist = cr.objects.get(name='Person List')
  ilist = cr.objects.get(name='Item List')
  tlist = cr.objects.get(name='Mixed Tuple')
  rlist = cr.objects.get(name='Room List')
  klist = cr.objects.get(name='KitThing List')

  model = apps.get_model("streampunk", "Check")
  model(result=plist, module="no_email", name="People with no email address", description="List people who do not yet have an email address entered.").save()
  model(result=plist, module="not_member", name="People who haven't joined yet", description="List people who don't have a valid membership number yet.").save()
  model(result=plist, module="not_complete_person", name="People who aren't complete joined yet", description="List people who aren't marked as 'Complete' yet.").save()
  model(result=ilist, module="people_clashes", name="People clashes", description="List items where the same person is programmed on two concurrent items.").save()
  model(result=ilist, module="items_no_people", name="Items with no people", description="List items which have no people on them.").save()
  model(result=ilist, module="items_no_room", name="Items with no room", description="List items which are not assigned to a real room yet.").save()
  model(result=ilist, module="items_not_scheduled", name="Items not scheduled", description="List items which do not have a defined day/time start yet.").save()
  model(result=ilist, module="items_unknown_gophers", name="Items with unknown gopher count", description="List items for which the gopher count is still -1.").save()
  model(result=ilist, module="items_unsatisfied_kiteq", name="Items with unsatisfied kit requests", description="List items for which there are kit requests unsatisfied by either room or item assignments.").save()
  model(result=tlist, module="kit_clashes", name="Kit clashes", description="List kit assignments which clash with other kit assignments").save()
  model(result=plist, module="people_no_avail", name="People without availability", description="List people who have no availability info entered.").save()
  model(result=plist, module="people_not_avail", name="People unavailable", description="List people who are programmed on items outside their available times.").save()
  model(result=tlist, module="room_not_avail", name="Items in unavailable rooms", description="List items that are scheduled in rooms when the room is unavailable.").save()
  model(result=tlist, module="kit_not_avail_for_item", name="Items with unavailable kit", description="List items that have kit assigned to them when the it is unavailable.").save()
  model(result=tlist, module="kit_not_avail_for_room", name="Kit/room availability mismatch", description="List cases where kit is assigned to a room in a period when one or both are unavailable.").save()
  model(result=rlist, module="room_no_avail", name="Rooms without availability", description="List rooms with no availability info.").save()
  model(result=klist, module="kit_no_avail", name="KitThings without availability", description="List kit things with no availability info.").save()

def make_default_ItemKind(apps, schema_editor):
  model = apps.get_model("streampunk", "ItemKind")
  model(name='TBA',      gridOrder=100, isUndefined=True,  isDefault=True).save()
  model(name='Panel',    gridOrder=20,  isUndefined=False, isDefault=False, description="Standard Panel discussion").save()
  model(name='Talk',     gridOrder=30,  isUndefined=False, isDefault=False, description="Someone presenting a talk or speech").save()
  model(name='Workshop', gridOrder=40,  isUndefined=False, isDefault=False, description="An activity that gets all attendees involved").save()
  model(name='Exercise', gridOrder=50,  isUndefined=False, isDefault=False, description="A physical activity").save()
  model(name='Game',     gridOrder=60,  isUndefined=False, isDefault=False, description="Something with rules and a winner").save()
  model(name='Interview',gridOrder=70,  isUndefined=False, isDefault=False, description="An interview of a guest").save()
  model(name='Other',    gridOrder=80,  isUndefined=False, isDefault=False, description="Something that doesn't fit into the other categories").save()

def make_default_SeatingKind(apps, schema_editor):
  model = apps.get_model("streampunk", "SeatingKind")
  model(name='TBA',                gridOrder=100, isUndefined=True,  isDefault=True).save()
  model(name='Theatre',            gridOrder=20,  isUndefined=False, isDefault=False, description="Chairs in rows facing the front").save()
  model(name='Chairs around wall', gridOrder=30,  isUndefined=False, isDefault=False, description="Chairs around with walls, with the centre empty").save()
  model(name='Boardroom',          gridOrder=40,  isUndefined=False, isDefault=False, description="Chairs around a single table in the middle of the room").save()
  model(name='Empty',              gridOrder=50,  isUndefined=False, isDefault=False, description="No chairs or tables").save()
  model(name='Cabaret',            gridOrder=60,  isUndefined=False, isDefault=False, description="Chairs around multiple circular tables").save()

def make_default_FrontLayoutKind(apps, schema_editor):
  model = apps.get_model("streampunk", "FrontLayoutKind")
  model(name='TBA',   gridOrder=100, isUndefined=True,  isDefault=True).save()
  model(name='Panel', gridOrder=20,  isUndefined=False, isDefault=False, description="Chairs, table for panellists").save()

def make_default_Gender(apps, schema_editor):
  model = apps.get_model("streampunk", "Gender")
  model(name='TBA',    gridOrder=100, isUndefined=True,  isDefault=True).save()
  model(name='Male',   gridOrder=20,  isUndefined=False, isDefault=False).save()
  model(name='Female', gridOrder=30,  isUndefined=False, isDefault=False).save()

def make_default_KitKind(apps, schema_editor):
  model = apps.get_model("streampunk", "KitKind")
  model(name='TBA',            gridOrder=100, isUndefined=True,  isDefault=True).save()
  model(name='Projector',      gridOrder=20,  isUndefined=False, isDefault=False).save()
  model(name='Screen',         gridOrder=30,  isUndefined=False, isDefault=False).save()
  model(name='Television',     gridOrder=40,  isUndefined=False, isDefault=False).save()
  model(name='DVD Player',     gridOrder=50,  isUndefined=False, isDefault=False).save()
  model(name='Blu-Ray Player', gridOrder=60,  isUndefined=False, isDefault=False).save()
  model(name='CD Player',      gridOrder=70,  isUndefined=False, isDefault=False).save()
  model(name='iPod',           gridOrder=80,  isUndefined=False, isDefault=False).save()

def make_default_KitBasis(apps, schema_editor):
  model = apps.get_model("streampunk", "KitBasis")
  model(name='TBA',  gridOrder=100, isUndefined=True,  isDefault=True).save()
  model(name='Hire', gridOrder=20,  isUndefined=False, isDefault=False).save()
  model(name='Loan', gridOrder=30,  isUndefined=False, isDefault=False).save()
  model(name='Buy',  gridOrder=40,  isUndefined=False, isDefault=False).save()

def make_default_KitStatus(apps, schema_editor):
  model = apps.get_model("streampunk", "KitStatus")
  model(name='TBA',  gridOrder=100, isUndefined=True,  isDefault=True).save()
  model(name='Awaiting sign-off', gridOrder=20,  isUndefined=False, isDefault=False).save()
  model(name='Awaiting delivery', gridOrder=30,  isUndefined=False, isDefault=False).save()
  model(name='Awaiting purchase', gridOrder=40,  isUndefined=False, isDefault=False).save()
  model(name='Delivered',         gridOrder=50,  isUndefined=False, isDefault=False).save()

def make_default_KitDepartment(apps, schema_editor):
  model = apps.get_model("streampunk", "KitDepartment")
  model(name='TBA',        gridOrder=100, isUndefined=True,  isDefault=True).save()
  model(name='Tech',       gridOrder=20,  isUndefined=False, isDefault=False).save()
  model(name='Green Room', gridOrder=30,  isUndefined=False, isDefault=False).save()
  model(name='Ops',        gridOrder=40,  isUndefined=False, isDefault=False).save()

def make_default_MediaStatus(apps, schema_editor):
  model = apps.get_model("streampunk", "MediaStatus")
  model(name='TBA',                         gridOrder=100, isUndefined=True,  isDefault=True).save()
  model(name='No media required',           gridOrder=20,  isUndefined=False, isDefault=False).save()
  model(name='Media needs sending to Tech', gridOrder=20,  isUndefined=False, isDefault=False).save()
  model(name='Media received by Tech',      gridOrder=20,  isUndefined=False, isDefault=False).save()

def make_default_PersonRole(apps, schema_editor):
  model = apps.get_model("streampunk", "PersonRole")
  model(name='TBA',         gridOrder=100, isUndefined=True,  isDefault=False, drink=True, canClash=True, namecard=True).save()
  model(name='Panellist',   gridOrder=20,  isUndefined=False, isDefault=True,  drink=True, canClash=True, namecard=True, description="On a panel, but not running it").save()
  model(name='Moderator',   gridOrder=30,  isUndefined=False, isDefault=False, drink=True, canClash=True, namecard=True, description="Running the panel").save()
  model(name='Speaker',     gridOrder=40,  isUndefined=False, isDefault=False, drink=True, canClash=True, namecard=True, description="Presenting a talk or lecture").save()
  model(name='Interviewer', gridOrder=50,  isUndefined=False, isDefault=False, drink=True, canClash=True, namecard=True, description="Interviewing a guest").save()
  model(name='Interviewee', gridOrder=60,  isUndefined=False, isDefault=False, drink=True, canClash=True, namecard=True, description="Guest being interviewed").save()
  model(name='Wants to be here', gridOrder=70,  isUndefined=False, isDefault=False, drink=False, canClash=False, namecard=False, description="Person would like to attend this item, but is not participating. Would prefer not to be scheduled against this, but if they are, so be it.").save()
  model(name='Optional Panellist',   gridOrder=80,  isUndefined=False, isDefault=False,  drink=True, canClash=False, namecard=True, description="Panellist, but optional - okay if they cannot make it because of a clash").save()

def make_default_PersonStatus(apps, schema_editor):
  model = apps.get_model("streampunk", "PersonStatus")
  model(name='TBA',    gridOrder=100, isUndefined=True,  isDefault=True).save()
  model(name='Proposed',  gridOrder=20,  isUndefined=False, isDefault=False, description="Would be good for this item, but not contacted yet").save()
  model(name='Invited',   gridOrder=30,  isUndefined=False, isDefault=False, description="Has been invited, not yet confirmed").save()
  model(name='Confirmed', gridOrder=40,  isUndefined=False, isDefault=False, description="Has confirmed").save()

def make_default_ConDay(apps, schema_editor):
  model = apps.get_model("streampunk", "ConDay")
  model(name='TBA',      isUndefined=True,  isDefault=True,  date='1993-09-04', order=0).save()
  model(name='Friday',   isUndefined=False, isDefault=False, date='2012-04-06', order=2).save()
  model(name='Saturday', isUndefined=False, isDefault=False, date='2012-04-07', order=3).save()
  model(name='Sunday',   isUndefined=False, isDefault=False, date='2012-04-08', order=4).save()
  model(name='Monday',   isUndefined=False, isDefault=False, date='2012-04-09', order=5).save()

def make_default_SlotLength(apps, schema_editor):
  model = apps.get_model("streampunk", "SlotLength")
  obj = model(name='TBA',     length=0,   isUndefined=True,  isDefault=False).save()
  obj = model(name='30mins',  length=30,  isUndefined=False, isDefault=False).save()
  obj = model(name='1 hour',  length=60,  isUndefined=False, isDefault=True).save()
  obj = model(name='90mins',  length=90,  isUndefined=False, isDefault=False).save()
  obj = model(name='2 hours', length=120, isUndefined=False, isDefault=False).save()

def make_default_Slot(apps, schema_editor):
  cd = apps.get_model("streampunk", "ConDay")
  tba = cd.objects.get(name='TBA')
  fri = cd.objects.get(name='Friday')
  sat = cd.objects.get(name='Saturday')
  sun = cd.objects.get(name='Sunday')
  mon = cd.objects.get(name='Monday')
  model = apps.get_model("streampunk", "Slot")
  model(start=0,    isUndefined=True,  isDefault=True,  day=tba, startText='None',     slotText='None',          order=0).save()

  model(start=600,  isUndefined=False, isDefault=False, day=fri, startText='10am',     slotText='10-11am',       order=110).save()
  model(start=660,  isUndefined=False, isDefault=False, day=fri, startText='11am',     slotText='11-Noon',       order=111).save()
  model(start=720,  isUndefined=False, isDefault=False, day=fri, startText='Noon',     slotText='Noon-1pm',      order=112).save()
  model(start=780,  isUndefined=False, isDefault=False, day=fri, startText='1pm',      slotText='1-2pm',         order=113).save()
  model(start=840,  isUndefined=False, isDefault=False, day=fri, startText='2pm',      slotText='2-3pm',         order=114).save()
  model(start=900,  isUndefined=False, isDefault=False, day=fri, startText='3pm',      slotText='3-4pm',         order=115).save()
  model(start=960,  isUndefined=False, isDefault=False, day=fri, startText='4pm',      slotText='4-5pm',         order=116).save()
  model(start=1020, isUndefined=False, isDefault=False, day=fri, startText='5pm',      slotText='5-6pm',         order=117).save()
  model(start=1080, isUndefined=False, isDefault=False, day=fri, startText='6pm',      slotText='6-7pm',         order=118).save()
  model(start=1140, isUndefined=False, isDefault=False, day=fri, startText='7pm',      slotText='7-8pm',         order=119).save()
  model(start=1200, isUndefined=False, isDefault=False, day=fri, startText='8pm',      slotText='8-9pm',         order=120).save()
  model(start=1260, isUndefined=False, isDefault=False, day=fri, startText='9pm',      slotText='9-10pm',        order=121).save()
  model(start=1320, isUndefined=False, isDefault=False, day=fri, startText='10pm',     slotText='10-11pm',       order=122).save()
  model(start=1380, isUndefined=False, isDefault=False, day=fri, startText='11pm',     slotText='11pm-Midnight', order=123).save()
  model(start=1440, isUndefined=False, isDefault=False, day=fri, startText='Midnight', slotText='Midnight-1am',  order=124).save()
  model(start=1500, isUndefined=False, isDefault=False, day=fri, startText='1am',      slotText='1-2am',         order=125).save()

  model(start=600,  isUndefined=False, isDefault=False, day=sat, startText='10am',     slotText='10-11am',       order=110).save()
  model(start=660,  isUndefined=False, isDefault=False, day=sat, startText='11am',     slotText='11-Noon',       order=111).save()
  model(start=720,  isUndefined=False, isDefault=False, day=sat, startText='Noon',     slotText='Noon-1pm',      order=112).save()
  model(start=780,  isUndefined=False, isDefault=False, day=sat, startText='1pm',      slotText='1-2pm',         order=113).save()
  model(start=840,  isUndefined=False, isDefault=False, day=sat, startText='2pm',      slotText='2-3pm',         order=114).save()
  model(start=900,  isUndefined=False, isDefault=False, day=sat, startText='3pm',      slotText='3-4pm',         order=115).save()
  model(start=960,  isUndefined=False, isDefault=False, day=sat, startText='4pm',      slotText='4-5pm',         order=116).save()
  model(start=1020, isUndefined=False, isDefault=False, day=sat, startText='5pm',      slotText='5-6pm',         order=117).save()
  model(start=1080, isUndefined=False, isDefault=False, day=sat, startText='6pm',      slotText='6-7pm',         order=118).save()
  model(start=1140, isUndefined=False, isDefault=False, day=sat, startText='7pm',      slotText='7-8pm',         order=119).save()
  model(start=1200, isUndefined=False, isDefault=False, day=sat, startText='8pm',      slotText='8-9pm',         order=120).save()
  model(start=1260, isUndefined=False, isDefault=False, day=sat, startText='9pm',      slotText='9-10pm',        order=121).save()
  model(start=1320, isUndefined=False, isDefault=False, day=sat, startText='10pm',     slotText='10-11pm',       order=122).save()
  model(start=1380, isUndefined=False, isDefault=False, day=sat, startText='11pm',     slotText='11pm-Midnight', order=123).save()
  model(start=1440, isUndefined=False, isDefault=False, day=sat, startText='Midnight', slotText='Midnight-1am',  order=124).save()
  model(start=1500, isUndefined=False, isDefault=False, day=sat, startText='1am',      slotText='1-2am',         order=125).save()

  model(start=600,  isUndefined=False, isDefault=False, day=sun, startText='10am',     slotText='10-11am',       order=110).save()
  model(start=660,  isUndefined=False, isDefault=False, day=sun, startText='11am',     slotText='11-Noon',       order=111).save()
  model(start=720,  isUndefined=False, isDefault=False, day=sun, startText='Noon',     slotText='Noon-1pm',      order=112).save()
  model(start=780,  isUndefined=False, isDefault=False, day=sun, startText='1pm',      slotText='1-2pm',         order=113).save()
  model(start=840,  isUndefined=False, isDefault=False, day=sun, startText='2pm',      slotText='2-3pm',         order=114).save()
  model(start=900,  isUndefined=False, isDefault=False, day=sun, startText='3pm',      slotText='3-4pm',         order=115).save()
  model(start=960,  isUndefined=False, isDefault=False, day=sun, startText='4pm',      slotText='4-5pm',         order=116).save()
  model(start=1020, isUndefined=False, isDefault=False, day=sun, startText='5pm',      slotText='5-6pm',         order=117).save()
  model(start=1080, isUndefined=False, isDefault=False, day=sun, startText='6pm',      slotText='6-7pm',         order=118).save()
  model(start=1140, isUndefined=False, isDefault=False, day=sun, startText='7pm',      slotText='7-8pm',         order=119).save()
  model(start=1200, isUndefined=False, isDefault=False, day=sun, startText='8pm',      slotText='8-9pm',         order=120).save()
  model(start=1260, isUndefined=False, isDefault=False, day=sun, startText='9pm',      slotText='9-10pm',        order=121).save()
  model(start=1320, isUndefined=False, isDefault=False, day=sun, startText='10pm',     slotText='10-11pm',       order=122).save()
  model(start=1380, isUndefined=False, isDefault=False, day=sun, startText='11pm',     slotText='11pm-Midnight', order=123).save()
  model(start=1440, isUndefined=False, isDefault=False, day=sun, startText='Midnight', slotText='Midnight-1am',  order=124).save()
  model(start=1500, isUndefined=False, isDefault=False, day=sun, startText='1am',      slotText='1-2am',         order=125).save()

  model(start=600,  isUndefined=False, isDefault=False, day=mon, startText='10am',     slotText='10-11am',       order=110).save()
  model(start=660,  isUndefined=False, isDefault=False, day=mon, startText='11am',     slotText='11-Noon',       order=111).save()
  model(start=720,  isUndefined=False, isDefault=False, day=mon, startText='Noon',     slotText='Noon-1pm',      order=112).save()
  model(start=780,  isUndefined=False, isDefault=False, day=mon, startText='1pm',      slotText='1-2pm',         order=113).save()
  model(start=840,  isUndefined=False, isDefault=False, day=mon, startText='2pm',      slotText='2-3pm',         order=114).save()
  model(start=900,  isUndefined=False, isDefault=False, day=mon, startText='3pm',      slotText='3-4pm',         order=115).save()
  model(start=960,  isUndefined=False, isDefault=False, day=mon, startText='4pm',      slotText='4-5pm',         order=116).save()
  model(start=1020, isUndefined=False, isDefault=False, day=mon, startText='5pm',      slotText='5-6pm',         order=117).save()
  model(start=1080, isUndefined=False, isDefault=False, day=mon, startText='6pm',      slotText='6-7pm',         order=118).save()
  model(start=1140, isUndefined=False, isDefault=False, day=mon, startText='7pm',      slotText='7-8pm',         order=119).save()
  model(start=1200, isUndefined=False, isDefault=False, day=mon, startText='8pm',      slotText='8-9pm',         order=120).save()
  model(start=1260, isUndefined=False, isDefault=False, day=mon, startText='9pm',      slotText='9-10pm',        order=121).save()
  model(start=1320, isUndefined=False, isDefault=False, day=mon, startText='10pm',     slotText='10-11pm',       order=122).save()
  model(start=1380, isUndefined=False, isDefault=False, day=mon, startText='11pm',     slotText='11pm-Midnight', order=123).save()
  model(start=1440, isUndefined=False, isDefault=False, day=mon, startText='Midnight', slotText='Midnight-1am',  order=124).save()
  model(start=1500, isUndefined=False, isDefault=False, day=mon, startText='1am',      slotText='1-2am',         order=125).save()

def make_default_Grid(apps, schema_editor):
  cd = apps.get_model("streampunk", "ConDay")
  slot = apps.get_model("streampunk", "Slot")
  days = [ 'Friday', 'Saturday', 'Sunday', 'Monday' ]
  grids = [ ( [ '10am', '11am', 'Noon', '1pm' ], '10am-2pm' ),
            ( [ '2pm', '3pm', '4pm', '5pm' ],'2-6pm' ),
            ( [ '6pm', '7pm', '8pm', '9pm' ], '6-10pm' ),
            ( [ '10pm', '11pm', 'Midnight', '1am' ], '10pm-2am' ) ]
  order = 10
  model = apps.get_model("streampunk", "Grid")
  for dayname in days:
    day = cd.objects.get(name=dayname)
    for grid in grids:
      (slotnames, gridname) = grid
      g = model(gridOrder=order, name=gridname)
      g.save()
      for slotname in slotnames:
        s = slot.objects.get(day=day, startText=slotname)
        g.slots.add(s)
      g.save()
      order = order + 10

def make_default_Room(apps, schema_editor):
  model = apps.get_model("streampunk", "Room")
  model(name='Nowhere', isUndefined=True, isDefault=True, gridOrder=99, description="For items that have not yet been allocated a room, or do not need one.", canClash=False).save()
  model(name='Everywhere', isUndefined=False, isDefault=False, gridOrder=99, description="For items that have no fixed location, e.g. a treasure hunt.", canClash=False).save()

def make_latest_Revision(apps, schema_editor):
  model = apps.get_model("streampunk", "Revision")
  obj = model(baseline='1993-09-04T00:00:00Z', colour='black', description='First draft')
  obj.save()

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [


        migrations.CreateModel(
            name='BundleItemAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),


        migrations.CreateModel(
            name='BundleRoomAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),


        migrations.CreateModel(
            name='ChangeLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, max_length=32)),
                ('log_id', models.IntegerField()),
                ('stamp', models.DateTimeField(auto_now_add=True)),
                ('field', models.CharField(choices=[('pemail', 'Person email changed'), ('padded', 'Person added'), ('ipadded', 'Person added to item'), ('ilength', 'Item length'), ('istewards', 'Item steward count'), ('ishort', 'Item short name'), ('pprivNotes', 'Person privNotes changed'), ('igophers', 'Item gopher count'), ('iadded', 'Item added'), ('istart', 'Item start day/time'), ('ipdeleted', 'Person removed from item'), ('pdeleted', 'Person deleted'), ('ipperson', 'Person replaced on item'), ('krdeleted', 'Kit request deleted'), ('krchanged', 'Kit request edited'), ('ibudget', 'Item budget'), ('ipitem', 'Person move to another item'), ('kradded', 'Kit request added'), ('ivisible', 'Item visibility'), ('ipvisible', 'Person visibility on item'), ('pbadge_only', 'Person badge-only changed'), ('itech', 'Item tech'), ('pmem', 'Person membership no'), ('ititle', 'Item title'), ('iroom', 'Item room'), ('ideleted', 'Item deleted')], max_length=32)),
                ('old_val', models.CharField(blank=True, max_length=256)),
                ('new_val', models.CharField(blank=True, max_length=256)),
            ],
        ),



        migrations.CreateModel(
            name='CheckResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
            ],
            options={
                'ordering': ['gridOrder'],
                'abstract': False,
            },
        ),
        migrations.RunPython(make_default_CheckResult),


        migrations.CreateModel(
            name='Check',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the check.', max_length=120)),
                ('description', models.TextField(help_text='Explanation of what the check verifies', max_length=256)),
                ('module', models.SlugField(help_text='Used to identify the code to load and run, and how to render the results', max_length=48)),
            ],
        ),
        migrations.AddField(
            model_name='check',
            name='result',
            field=models.ForeignKey(default=streampunk.models.CheckResult_find_default, help_text='The kind of result returned by the check', on_delete=django.db.models.deletion.CASCADE, to='streampunk.CheckResult'),
        ),
        migrations.RunPython(make_default_Check),

        migrations.CreateModel(
            name='ConDay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the day, e.g. Friday, or Bank Holiday Monday', max_length=24)),
                ('date', models.DateField(help_text='The actual date of the day.')),
                ('order', models.IntegerField(help_text='This could be used for determining the order in which days are listed. Currently ignored.')),
                ('visible', models.BooleanField(default=False, help_text='Should this day be displayed in the official programme?')),
                ('isDefault', models.BooleanField(default=False, help_text='True if this is the default day for items. Set this for <em>exactly one</em> day.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True if this day means 'to be decided'. Items on this day are considered unscheduled.")),
            ],
            options={
                'ordering': ['order'],
                'get_latest_by': 'date',
            },
        ),
        migrations.RunPython(make_default_ConDay),


        migrations.CreateModel(
            name='ConInfoBool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A descriptive name for this flag', max_length=64)),
                ('var', models.SlugField(help_text='The name used internally to access this flag: Alphanumerics only, no whitespace', max_length=64)),
                ('val', models.BooleanField(default=False, help_text="The flag's value")),
            ],
        ),
        migrations.RunPython(make_default_ConInfoBool),


        migrations.CreateModel(
            name='ConInfoInt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A descriptive name for this variable', max_length=64)),
                ('var', models.SlugField(help_text='The internal name of the variable. Alphanumerics only, no whitespace', max_length=64)),
                ('val', models.IntegerField(help_text='The value for the variable.')),
            ],
        ),
        migrations.RunPython(make_default_ConInfoInt),


        migrations.CreateModel(
            name='ConInfoString',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A descriptive name for this variable', max_length=64)),
                ('var', models.SlugField(help_text='The internal name of the variable. Alphanumerics only, no whitespace', max_length=64)),
                ('val', models.CharField(help_text='The value for the variable.', max_length=256)),
            ],
        ),
        migrations.RunPython(make_default_ConInfoString),


        migrations.CreateModel(
            name='FrontLayoutKind',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
            ],
            options={
                'ordering': ['gridOrder'],
                'abstract': False,
            },
        ),
        migrations.RunPython(make_default_FrontLayoutKind),


        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
            ],
            options={
                'ordering': ['gridOrder'],
                'abstract': False,
            },
        ),
        migrations.RunPython(make_default_Gender),


        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='The full title of the item', max_length=128)),
                ('shortname', models.CharField(blank=True, help_text='Shorthand for the item. Handy for grids, back-of-badge labels, etc.', max_length=32)),
                ('blurb', models.TextField(blank=True, help_text="A public description about the item, so people know what it's about")),
                ('visible', models.BooleanField(default=True, help_text='Set to true if the item should appear on the printed programme')),
                ('expAudience', models.IntegerField(default=30, help_text="estimate the size of the audience. Used to check whether the item's in a suitably-sized room")),
                ('gophers', models.IntegerField(default=0, help_text='Any gophers required by this item?')),
                ('stewards', models.IntegerField(default=0, help_text='Any stewards required by this item?')),
                ('budget', models.IntegerField(default=0, help_text='How much budget has been allocated to this item?')),
                ('projNeeded', models.CharField(choices=[('TBA', 'TBA'), ('Yes', 'Yes'), ('No', 'No')], default='TBA', help_text='Does the item require a projector?', max_length=4)),
                ('techNeeded', models.CharField(choices=[('TBA', 'TBA'), ('Yes', 'Yes'), ('No', 'No')], default='TBA', help_text='Does the item require any other Tech, besides a projector?', max_length=4)),
                ('complete', models.CharField(choices=[('TBA', 'TBA'), ('Yes', 'Yes'), ('No', 'No')], default='No', help_text='Mark as Yes when you no longer expect any changes to happen to this item.', max_length=4)),
                ('privNotes', models.TextField(blank=True, help_text="Private notes, visible only to con staff. <em>Don't</em> put tech notes here.")),
                ('techNotes', models.TextField(blank=True, help_text='Any info about needed Tech should go here.')),
                ('pubBring', models.TextField(blank=True, help_text='Information about anything the audience should bring, for this item, e.g. loose clothing, kilts for a ceilidh. Useful for putting into Progress Reports.')),
                ('audienceMics', models.BooleanField(default=False, help_text='True if the item probably needs roving microphones for questions from audience.')),
                ('allTechCrew', models.BooleanField(default=False, help_text='True if this item will need the entire Tech Crew to work on it.')),
                ('needsReset', models.BooleanField(default=False, help_text='True if the room will need to be reset <em>before</em> the item')),
                ('needsCleanUp', models.BooleanField(default=False, help_text='True if the room will need to be cleaned up <em>after</em> the item')),
            ],
            options={
                'ordering': ['title', 'shortname'],
                'verbose_name': 'item',
                'verbose_name_plural': 'items',
            },
        ),


        migrations.CreateModel(
            name='ItemKind',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
            ],
            options={
                'ordering': ['gridOrder'],
                'abstract': False,
            },
        ),
        migrations.RunPython(make_default_ItemKind),


        migrations.CreateModel(
            name='ItemPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', models.BooleanField(default=True, help_text='True if the the person should be listed as participating, in the printed programme')),
                ('distEmail', models.CharField(choices=[('TBA', 'TBA'), ('Yes', 'Yes'), ('No', 'No')], default='No', help_text="True if the person has confirmed it's okay to distribute their email address to the other people on the item", max_length=4)),
                ('recordingOkay', models.CharField(choices=[('TBA', 'TBA'), ('Yes', 'Yes'), ('No', 'No')], default='No', help_text="True if the person has confirmed they're okay with being recorded, for this item", max_length=4)),
                ('item', models.ForeignKey(help_text='The item the person is participating in', on_delete=django.db.models.deletion.CASCADE, to='streampunk.Item')),
            ],
            options={
                'verbose_name': 'itemperson',
                'verbose_name_plural': 'itemspeople',
            },
        ),


        migrations.CreateModel(
            name='KitBasis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
            ],
            options={
                'ordering': ['gridOrder'],
                'abstract': False,
            },
        ),
        migrations.RunPython(make_default_KitBasis),


        migrations.CreateModel(
            name='KitBundle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the bundle. Make sure you can distinguish bundles by name', max_length=64)),
            ],
            options={
                'verbose_name': 'kitbundle',
                'verbose_name_plural': 'kitbundles',
            },
        ),


        migrations.CreateModel(
            name='KitDepartment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
            ],
            options={
                'ordering': ['gridOrder'],
                'abstract': False,
            },
        ),
        migrations.RunPython(make_default_KitDepartment),


        migrations.CreateModel(
            name='KitItemAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ForeignKey(help_text="The item we're assigning the thing to", on_delete=django.db.models.deletion.CASCADE, to='streampunk.Item')),
            ],
        ),


        migrations.CreateModel(
            name='KitKind',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
            ],
            options={
                'ordering': ['gridOrder'],
                'abstract': False,
            },
        ),
        migrations.RunPython(make_default_KitKind),


        migrations.CreateModel(
            name='KitRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.SmallIntegerField(default=1, help_text='How many instances of that kit does the item require?')),
                ('setupAssistance', models.BooleanField(default=False, help_text="Set this if the item's participants require Tech Crew to come in and help set up the kit")),
                ('notes', models.TextField(blank=True, help_text='Any additional information required.')),
                ('kind', models.ForeignKey(default=streampunk.models.KitKind_find_default, help_text='What kind of kit does this item need?', on_delete=django.db.models.deletion.CASCADE, to='streampunk.KitKind')),
            ],
            options={
                'verbose_name': 'kitrequest',
                'verbose_name_plural': 'kitrequests',
            },
        ),


        migrations.CreateModel(
            name='KitRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
            ],
            options={
                'ordering': ['gridOrder'],
                'abstract': False,
            },
        ),
        migrations.RunPython(make_default_KitRole),


        migrations.CreateModel(
            name='KitRoomAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),


        migrations.CreateModel(
            name='KitSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
            ],
            options={
                'ordering': ['gridOrder'],
                'abstract': False,
            },
        ),
        migrations.RunPython(make_default_KitSource),


        migrations.CreateModel(
            name='KitStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
            ],
            options={
                'ordering': ['gridOrder'],
                'abstract': False,
            },
        ),
        migrations.RunPython(make_default_KitStatus),


        migrations.CreateModel(
            name='KitThing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of this bit of kit. Be descriptive so that you can distinguish similar things.', max_length=64)),
                ('description', models.TextField(blank=True, help_text='Additional information, if necessary.')),
                ('count', models.SmallIntegerField(default=1, help_text='How many instances are there in this thing? They must always be kept together.')),
                ('cost', models.IntegerField(default=0, help_text='How much is this going to hit the budget?')),
                ('insurance', models.IntegerField(default=0, help_text='What is the value of the kit, for insurance purposes?')),
                ('notes', models.TextField(blank=True, help_text='Any additional notes required')),
                ('coordinator', models.CharField(help_text='The name of the person responsible for sourcing this bit of kit', max_length=64)),
            ],
            options={
                'verbose_name': 'kitthing',
                'verbose_name_plural': 'kitthings',
            },
        ),


        migrations.CreateModel(
            name='MediaStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
            ],
            options={
                'ordering': ['gridOrder'],
                'abstract': False,
            },
        ),
        migrations.RunPython(make_default_MediaStatus),


        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstName', models.CharField(blank=True, help_text="Someone's first name, e.g. Karen. People <em>can</em> be listed sorted by this field. Can be blank.", max_length=64)),
                ('middleName', models.CharField(blank=True, help_text="Someone's middle name, e.g. Clarence. Entirely optional.", max_length=64)),
                ('lastName', models.CharField(blank=True, help_text="Someone's surname, e.g. Nixon. People will most often be listed sorted by this field. If someone only has a single name, probably best to put it here.", max_length=64)),
                ('badge', models.CharField(blank=True, help_text='Optional.', max_length=64)),
                ('badge_only', models.BooleanField(default=False, help_text='If you set this to true, only the badge name will be visible in the public versions of the programme.')),
                ('email', models.EmailField(blank=True, help_text='<em>Just</em> the email address', max_length=254)),
                ('headshot', models.URLField(blank=True, help_text='Link to an image of the person (or an avatar), for publicity purposes. Can be blank.')),
                ('url', models.URLField(blank=True, help_text='Link to their home page, site, blog, or whatever, for publicity purposes. Can be blank.')),
                ('facebook', models.URLField(blank=True, help_text='Link to the person on Facebook, for publicity purposes. Can be blank.')),
                ('twitter', models.CharField(blank=True, help_text="The person's Twitter username (no @ character at start), for publicity. Can be blank.", max_length=64)),
                ('memnum', models.IntegerField(default=-1, help_text="The person's membership number, or -1 if they haven't joined yet.")),
                ('pubNotes', models.TextField(blank=True, help_text='Public notes about the person. Can be biographic. These details will be visible to everyone.')),
                ('privNotes', models.TextField(blank=True, help_text='Private notes about the person, visible only to con staff.')),
                ('contact', models.TextField(blank=True, help_text="The person's contact details: address, phone number, etc.")),
                ('complete', models.CharField(choices=[('TBA', 'TBA'), ('Yes', 'Yes'), ('No', 'No')], default='No', help_text='Set this to Yes when you have gathered all the information you need about this person.', max_length=4)),
                ('distEmail', models.CharField(choices=[('TBA', 'TBA'), ('Yes', 'Yes'), ('No', 'No')], default='No', help_text="True if the person has confirmed that it's okay to pass on their email address to other programme participants", max_length=4)),
                ('recordingOkay', models.CharField(choices=[('TBA', 'TBA'), ('Yes', 'Yes'), ('No', 'No')], default='No', help_text="True if the person has confirmed they're okay with being recorded (audio or video) on programme items", max_length=4)),
            ],
            options={
                'ordering': ['lastName', 'firstName', 'middleName'],
                'verbose_name': 'person',
                'verbose_name_plural': 'people',
            },
        ),


        migrations.CreateModel(
            name='PersonList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Pick a meaningful name, including why you've saved this list", max_length=120)),
                ('auto', models.BooleanField(default=False, help_text="If true, this list will be deleted as soon as it's been used to send email")),
                ('created', models.DateTimeField(auto_now_add=True, help_text='We note when a PersonList is created, so we can delete old ones.')),
                ('people', models.ManyToManyField(blank=True, help_text='The people in this list', to='streampunk.Person')),
            ],
        ),


        migrations.CreateModel(
            name='PersonRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
                ('drink', models.BooleanField(default=True, help_text='True if the person should appear on the drinks form for the item.')),
                ('namecard', models.BooleanField(default=True, help_text='True if the person needs a name card for the item.')),
                ('canClash', models.BooleanField(default=True, help_text='True if it should be considered a problem if this person is committed elsewhere.')),
            ],
            options={
                'ordering': ['gridOrder'],
                'abstract': False,
            },
        ),
        migrations.RunPython(make_default_PersonRole),

        migrations.CreateModel(
            name='PersonStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
            ],
            options={
                'verbose_name': 'Person Status',
                'verbose_name_plural': 'Person Statuses',
            },
        ),
        migrations.RunPython(make_default_PersonStatus),

        migrations.CreateModel(
            name='Revision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('baseline', models.DateTimeField(help_text='This is when the set of changes began.')),
                ('colour', models.CharField(help_text='This should be the name of a CSS style, to control how items in this revision should be displayed.', max_length=20)),
                ('description', models.TextField(help_text='A description of this baseline of the programme')),
            ],
            options={
                'ordering': ['-baseline'],
                'get_latest_by': 'baseline',
            },
        ),
        migrations.RunPython(make_latest_Revision),


        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="The name of the room, as it'll appear in the programme", max_length=64)),
                ('description', models.TextField(blank=True, help_text="What you'll use this room for")),
                ('visible', models.BooleanField(default=True, help_text='Should it appear on the printed programme?')),
                ('isDefault', models.BooleanField(default=False, help_text='True if this is where items go by default. Set this on <em>exactly one</em> room.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True if this room means 'no room defined'. Items in this room will be considered unscheduled. Set this on <em>exactly one</em> room.")),
                ('canClash', models.BooleanField(default=False, help_text='True if multiple concurrent items in this room should be considered a problem.')),
                ('disabledAccess', models.BooleanField(default=True, help_text='True if the room is wheelchair-accessible')),
                ('gridOrder', models.IntegerField(default=50, help_text='The rooms will be displayed in the grid in ascending order of this field')),
                ('privNotes', models.TextField(blank=True, help_text="Pivate notes about the room. <em>Don't</em> put tech-related info here.")),
                ('techNotes', models.TextField(blank=True, help_text='Any additional tech-related information')),
                ('needsSound', models.BooleanField(default=False, help_text='True if items in this room will require amplification')),
                ('naturalLight', models.BooleanField(default=False, help_text='True if the room has its own natural light')),
                ('securable', models.BooleanField(default=False, help_text='True if the room can be securely locked, so that valuables can be left inside')),
                ('controlLightsInRoom', models.BooleanField(default=False, help_text="True if you can control the room's lighting from inside the room")),
                ('controlAirConInRoom', models.BooleanField(default=False, help_text="True if you can control the room's air conditioning from inside the room")),
                ('accessibleOnFlat', models.BooleanField(default=False, help_text='True if you can get to the room without stairs (for trolleys, etc)')),
                ('hasWifi', models.BooleanField(default=False, help_text='True if the room has a usable wifi signal')),
                ('hasCableRuns', models.BooleanField(default=False, help_text='True if the room has usable cable runs')),
                ('openableWindows', models.BooleanField(default=False, help_text='true if the room has windows which you can open')),
                ('closableCurtains', models.BooleanField(default=False, help_text='True if the room has curtains you can close')),
                ('inRadioRange', models.BooleanField(default=False, help_text='True if the radio net can reach people in the room')),
            ],
            options={
                'ordering': ['isDefault', 'gridOrder'],
                'verbose_name': 'room',
                'verbose_name_plural': 'rooms',
            },
        ),
        migrations.RunPython(make_default_Room),


        migrations.CreateModel(
            name='RoomCapacity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(help_text='How many people can fit into the room, in this layout')),
            ],
            options={
                'verbose_name': 'room-capacity',
                'verbose_name_plural': 'room-capacities',
            },
        ),


        migrations.CreateModel(
            name='SeatingKind',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for this choice.', max_length=64)),
                ('isDefault', models.BooleanField(default=False, help_text='True if objects for this class should default to this value. Set this for <em>exactly one</em> value.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True is this value means 'to be decided'. Set this for <em>exactly one</em> value.")),
                ('gridOrder', models.IntegerField(default=1, help_text='The choices for this class are displayed in ascending order of this field')),
                ('description', models.TextField(blank=True, help_text='An explanation of this value')),
            ],
            options={
                'ordering': ['gridOrder'],
                'abstract': False,
            },
        ),
        migrations.RunPython(make_default_SeatingKind),


        migrations.CreateModel(
            name='SlotLength',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="The name of this slot, e.g. '1 hour'", max_length=30)),
                ('length', models.IntegerField(default=60, help_text='The duration of the slot, in minutes.')),
                ('isDefault', models.BooleanField(default=False, help_text='True if this is the default choice for an item. <em>Set this on exactly one slot</em>.')),
                ('isUndefined', models.BooleanField(default=False, help_text="True if this value means 'to be decided'. Set this on <em>exactly one</em> slot. Items with this length are considered problematic by checks.")),
            ],
            options={
                'ordering': ['isDefault', 'length'],
            },
        ),
        migrations.RunPython(make_default_SlotLength),


        migrations.CreateModel(
            name='Slot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.IntegerField(help_text='When the slot will start, in minutes after midnight.')),
                ('startText', models.CharField(help_text='A convenient label for the slot, e.g. 7pm', max_length=20)),
                ('slotText', models.CharField(help_text='A label for the duration of the slot, e.g. 7-8pm', max_length=20)),
                ('visible', models.BooleanField(default=True, help_text='True if the slot should be visible in the printed programme')),
                ('isDefault', models.BooleanField(default=False, help_text='True if this should be the default slot for an item. Set this on <em>exactly one</em> slot')),
                ('isUndefined', models.BooleanField(default=False, help_text="True if this value means 'to be decided.' Set this on <em>exactly one</em> slot. Items starting in this slot are considered unscheduled.")),
                ('order', models.IntegerField(help_text='This is used for determining the order in which slots are listed.')),
                ('day', models.ForeignKey(default=streampunk.models.ConDay_find_default, help_text='Which day this slot occurs on', on_delete=django.db.models.deletion.CASCADE, to='streampunk.ConDay')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.RunPython(make_default_Slot),


        migrations.CreateModel(
            name='Grid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="A label for the period covered by the slots, e.g. 'Midday-4pm'", max_length=40)),
                ('gridOrder', models.IntegerField(default=1, help_text='The grids will be displayed in ascending order of this field.')),
            ],
            options={
                'ordering': ['gridOrder'],
            },
        ),
        migrations.AddField(
            model_name='grid',
            name='slots',
            field=models.ManyToManyField(help_text='The slots within the period of the grid. The slots should be consecutive.', to='streampunk.Slot'),
        ),
        migrations.RunPython(make_default_Grid),


        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name for the tag', max_length=64)),
                ('description', models.TextField(blank=True, help_text='An explanation of what this tag means')),
                ('icon', models.URLField(blank=True, help_text='You can make this the URL of an image, in which case the image can be displayed on the grids')),
                ('visible', models.BooleanField(default=True, help_text='Set this if the tag should be visible in the printed programme')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'tag',
                'verbose_name_plural': 'tags',
            },
        ),


        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_shortname', models.BooleanField(default=streampunk.models.ConInfoBool_show_shortname, help_text='True if shortnames should be displayed')),
                ('show_tags', models.BooleanField(default=True, help_text='True if tags should be displayed on the grid')),
                ('show_people', models.BooleanField(default=True, help_text='True if people should be displayed on the grid')),
                ('show_kithings', models.BooleanField(default=False, help_text='True if kit things should be displayed on the grid')),
                ('show_kitbundles', models.BooleanField(default=False, help_text='True if kit bundles should be displayed on the grid')),
                ('show_kitrequests', models.BooleanField(default=False, help_text='True if kit requests should be displayed on the grid')),
                ('rooms_across_top', models.BooleanField(default=streampunk.models.ConInfoBool_rooms_across_top, help_text='True if rooms should be listed across the top of the grid, False if they should be listed down the side.')),
                ('name_order', models.CharField(choices=[('Last', 'Last, First, Middle, Badge'), ('First', 'First, Middle, Last, Badge'), ('Badge', 'Badge, First, Middle, Last')], default='Last', help_text='How should person-lists be sorted?', max_length=4)),
                ('person', models.ForeignKey(blank=True, help_text='If this user is also a programme participant, select the person here.', null=True, on_delete=django.db.models.deletion.CASCADE, to='streampunk.Person')),
                ('user', models.OneToOneField(help_text='The User for which this profile applies', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('edit_private', 'Can edit private data'), ('edit_public', 'Can edit public data'), ('read_public', 'Can read public data'), ('read_private', 'Can read private data'), ('config_db', 'Can configure the database'), ('edit_programme', 'Can edit programme data'), ('edit_kit', 'Can edit kit-related data'), ('send_direct_email', 'Can send email to individuals'), ('send_item_email', 'Can send email to everyone on an item'), ('send_mass_email', 'Can send email to everyone'), ('import_data', 'Can import data'), ('export_data', 'Can export data'), ('edit_room', 'Can edit room info'), ('edit_tags', 'Can tag items/people and edit tags')),
            },
        ),


        migrations.AddField(
            model_name='slot',
            name='length',
            field=models.ForeignKey(default=streampunk.models.SlotLength_find_default, help_text='How long the slot lasts, in the programme', on_delete=django.db.models.deletion.CASCADE, to='streampunk.SlotLength'),
        ),
        migrations.AddField(
            model_name='roomcapacity',
            name='layout',
            field=models.ForeignKey(default=streampunk.models.SeatingKind_find_default, help_text='How the room is laid out', on_delete=django.db.models.deletion.CASCADE, to='streampunk.SeatingKind'),
        ),
        migrations.AddField(
            model_name='room',
            name='availability',
            field=models.ManyToManyField(blank=True, help_text='Add availabilities to indicate which slots the room is available for.', to='streampunk.Slot'),
        ),
        migrations.AddField(
            model_name='room',
            name='bundles',
            field=models.ManyToManyField(blank=True, help_text='Kit Bundles assigned to this room, to satisfy requests. <em>Only Tech should fill this in.</em>', through='streampunk.BundleRoomAssignment', to='streampunk.KitBundle'),
        ),
        migrations.AddField(
            model_name='room',
            name='capacities',
            field=models.ManyToManyField(blank=True, help_text='Use room capacities to indicate how many people can fit in the room in a given layout', to='streampunk.RoomCapacity'),
        ),
        migrations.AddField(
            model_name='room',
            name='kit',
            field=models.ManyToManyField(blank=True, help_text="Kit assigned to the room for a duration. May satisfy items' kit requests.", through='streampunk.KitRoomAssignment', to='streampunk.KitThing'),
        ),
        migrations.AddField(
            model_name='room',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='If this room is really part of a larger, subdividable room, set this field to the parent room', null=True, on_delete=django.db.models.deletion.CASCADE, to='streampunk.Room'),
        ),
        migrations.AddField(
            model_name='person',
            name='availability',
            field=models.ManyToManyField(blank=True, help_text="Add availability entries to this person to indicate when they're available for scheduling", to='streampunk.Slot'),
        ),
        migrations.AddField(
            model_name='person',
            name='gender',
            field=models.ForeignKey(default=streampunk.models.Gender_find_default, help_text='Gender. You can use this to determine your balance on your programme.', on_delete=django.db.models.deletion.CASCADE, to='streampunk.Gender'),
        ),
        migrations.AddField(
            model_name='person',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='Allocate whatever tags you think are appropriate to this person', to='streampunk.Tag'),
        ),
        migrations.AddField(
            model_name='kitthing',
            name='availability',
            field=models.ManyToManyField(blank=True, help_text='The slots during when the kit is available for allocation', to='streampunk.Slot'),
        ),
        migrations.AddField(
            model_name='kitthing',
            name='basis',
            field=models.ForeignKey(default=streampunk.models.KitBasis_find_default, help_text='Are you borrowing this kit? Buying it?', on_delete=django.db.models.deletion.CASCADE, to='streampunk.KitBasis'),
        ),
        migrations.AddField(
            model_name='kitthing',
            name='department',
            field=models.ForeignKey(default=streampunk.models.KitDepartment_find_default, help_text='Which dept is responsible for managing this bit of kit', on_delete=django.db.models.deletion.CASCADE, to='streampunk.KitDepartment'),
        ),
        migrations.AddField(
            model_name='kitthing',
            name='kind',
            field=models.ForeignKey(default=streampunk.models.KitKind_find_default, help_text='What kind of kit thing this is.', on_delete=django.db.models.deletion.CASCADE, to='streampunk.KitKind'),
        ),
        migrations.AddField(
            model_name='kitthing',
            name='role',
            field=models.ForeignKey(default=streampunk.models.KitRole_find_default, help_text='The purpose of this bit of kit, in the item', on_delete=django.db.models.deletion.CASCADE, to='streampunk.KitRole'),
        ),
        migrations.AddField(
            model_name='kitthing',
            name='source',
            field=models.ForeignKey(default=streampunk.models.KitSource_find_default, help_text="Who's providing this bit of kit to the event", on_delete=django.db.models.deletion.CASCADE, to='streampunk.KitSource'),
        ),
        migrations.AddField(
            model_name='kitthing',
            name='status',
            field=models.ForeignKey(default=streampunk.models.KitStatus_find_default, help_text='Is this bit of kit sorted?', on_delete=django.db.models.deletion.CASCADE, to='streampunk.KitStatus'),
        ),
        migrations.AddField(
            model_name='kitroomassignment',
            name='fromSlot',
            field=models.ForeignKey(help_text='The slot at which the assignment starts. The kit thing can satisfy requests that need the kit in this slot', on_delete=django.db.models.deletion.CASCADE, related_name='kitroomfrom_set', to='streampunk.Slot'),
        ),
        migrations.AddField(
            model_name='kitroomassignment',
            name='room',
            field=models.ForeignKey(help_text="The room to which you're assigning the kit", on_delete=django.db.models.deletion.CASCADE, to='streampunk.Room'),
        ),
        migrations.AddField(
            model_name='kitroomassignment',
            name='thing',
            field=models.ForeignKey(help_text="The kit you're assigning to this room.", on_delete=django.db.models.deletion.CASCADE, to='streampunk.KitThing'),
        ),
        migrations.AddField(
            model_name='kitroomassignment',
            name='toLength',
            field=models.ForeignKey(help_text='The length of the final slot assignment. At the end of this length, the assignment ends.', on_delete=django.db.models.deletion.CASCADE, to='streampunk.SlotLength'),
        ),
        migrations.AddField(
            model_name='kitroomassignment',
            name='toSlot',
            field=models.ForeignKey(help_text='The last slot for this assignment. The assignment can satisfy items that are in this slot.', on_delete=django.db.models.deletion.CASCADE, related_name='kitroomto_set', to='streampunk.Slot'),
        ),
        migrations.AddField(
            model_name='kitrequest',
            name='status',
            field=models.ForeignKey(default=streampunk.models.KitStatus_find_default, help_text='Has this request been sorted out?', on_delete=django.db.models.deletion.CASCADE, to='streampunk.KitStatus'),
        ),
        migrations.AddField(
            model_name='kititemassignment',
            name='thing',
            field=models.ForeignKey(help_text='The thing assigned to the item', on_delete=django.db.models.deletion.CASCADE, to='streampunk.KitThing'),
        ),
        migrations.AddField(
            model_name='kitbundle',
            name='status',
            field=models.ForeignKey(default=streampunk.models.KitStatus_find_default, help_text='Is this bundle sorted?', on_delete=django.db.models.deletion.CASCADE, to='streampunk.KitStatus'),
        ),
        migrations.AddField(
            model_name='kitbundle',
            name='things',
            field=models.ManyToManyField(help_text='The things that make up this bundle', to='streampunk.KitThing'),
        ),
        migrations.AddField(
            model_name='itemperson',
            name='person',
            field=models.ForeignKey(help_text='The person participating in the item', on_delete=django.db.models.deletion.CASCADE, to='streampunk.Person'),
        ),
        migrations.AddField(
            model_name='itemperson',
            name='role',
            field=models.ForeignKey(default=streampunk.models.PersonRole_find_default, help_text="What is the person's role, for this item?", on_delete=django.db.models.deletion.CASCADE, to='streampunk.PersonRole'),
        ),
        migrations.AddField(
            model_name='itemperson',
            name='status',
            field=models.ForeignKey(default=streampunk.models.PersonStatus_find_default, help_text='Has the person confirmed they can participate in this item?', on_delete=django.db.models.deletion.CASCADE, to='streampunk.PersonStatus'),
        ),
        migrations.AddField(
            model_name='item',
            name='bundles',
            field=models.ManyToManyField(blank=True, help_text='Kit Bundles assigned to this item, to satisfy requests. <em>Only Tech should fill this in.</em>', through='streampunk.BundleItemAssignment', to='streampunk.KitBundle'),
        ),
        migrations.AddField(
            model_name='item',
            name='follows',
            field=models.ForeignKey(blank=True, help_text='If this item must always immediately follow another item in the same room (e.g. setup, item, tear down), select the preceding item here', null=True, on_delete=django.db.models.deletion.CASCADE, to='streampunk.Item'),
        ),
        migrations.AddField(
            model_name='item',
            name='frontLayout',
            field=models.ForeignKey(default=streampunk.models.FrontLayoutKind_find_default, help_text='How should the front of the room be laid out, for the item participants?', on_delete=django.db.models.deletion.CASCADE, to='streampunk.FrontLayoutKind'),
        ),
        migrations.AddField(
            model_name='item',
            name='kind',
            field=models.ForeignKey(default=streampunk.models.ItemKind_find_default, help_text='What kind of item is this? Panel, talk, workshop, etc.', on_delete=django.db.models.deletion.CASCADE, to='streampunk.ItemKind'),
        ),
        migrations.AddField(
            model_name='item',
            name='kit',
            field=models.ManyToManyField(blank=True, help_text='Kit allocated to this item, to satisfy requests. <em>Only Tech should fill this in.</em>', through='streampunk.KitItemAssignment', to='streampunk.KitThing'),
        ),
        migrations.AddField(
            model_name='item',
            name='kitRequests',
            field=models.ManyToManyField(blank=True, editable=False, help_text='Kit requested by this item. <em>Only Tech should fill this in.</em>', to='streampunk.KitRequest'),
        ),
        migrations.AddField(
            model_name='item',
            name='length',
            field=models.ForeignKey(default=streampunk.models.SlotLength_find_default, help_text='The duration of the item', on_delete=django.db.models.deletion.CASCADE, to='streampunk.SlotLength'),
        ),
        migrations.AddField(
            model_name='item',
            name='mediaStatus',
            field=models.ForeignKey(default=streampunk.models.MediaStatus_find_default, help_text='Indicates whether Tech have suitably processed any media requirements for the item', on_delete=django.db.models.deletion.CASCADE, to='streampunk.MediaStatus'),
        ),
        migrations.AddField(
            model_name='item',
            name='people',
            field=models.ManyToManyField(blank=True, help_text='The people participating in this item', through='streampunk.ItemPerson', to='streampunk.Person'),
        ),
        migrations.AddField(
            model_name='item',
            name='revision',
            field=models.ForeignKey(default=streampunk.models.Revision_latest, help_text='Indicates which baseline of the programme this item was last modified in', on_delete=django.db.models.deletion.CASCADE, to='streampunk.Revision'),
        ),
        migrations.AddField(
            model_name='item',
            name='room',
            field=models.ForeignKey(default=streampunk.models.Room_find_default, help_text='The room in which the item takes place', on_delete=django.db.models.deletion.CASCADE, to='streampunk.Room'),
        ),
        migrations.AddField(
            model_name='item',
            name='seating',
            field=models.ForeignKey(default=streampunk.models.SeatingKind_find_default, help_text='How should the main body of the room be laid out, for the audience?', on_delete=django.db.models.deletion.CASCADE, to='streampunk.SeatingKind'),
        ),
        migrations.AddField(
            model_name='item',
            name='start',
            field=models.ForeignKey(default=streampunk.models.Slot_find_default, help_text='The slot in which the item will begin', null=True, on_delete=django.db.models.deletion.CASCADE, to='streampunk.Slot'),
        ),
        migrations.AddField(
            model_name='item',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='Assign any tags you think are relevant to this item.', to='streampunk.Tag'),
        ),
        migrations.AddField(
            model_name='bundleroomassignment',
            name='bundle',
            field=models.ForeignKey(help_text="The bundle you're assigning to this room.", on_delete=django.db.models.deletion.CASCADE, to='streampunk.KitBundle'),
        ),
        migrations.AddField(
            model_name='bundleroomassignment',
            name='fromSlot',
            field=models.ForeignKey(help_text='The slot at which the assignment starts. The bundle can satisfy requests that need the kit in this slot', on_delete=django.db.models.deletion.CASCADE, related_name='bundleroomfrom_set', to='streampunk.Slot'),
        ),
        migrations.AddField(
            model_name='bundleroomassignment',
            name='room',
            field=models.ForeignKey(help_text="The room to which you're assigning the bundle", on_delete=django.db.models.deletion.CASCADE, to='streampunk.Room'),
        ),
        migrations.AddField(
            model_name='bundleroomassignment',
            name='toLength',
            field=models.ForeignKey(help_text='The length of the final slot assignment. At the end of this length, the assignment ends.', on_delete=django.db.models.deletion.CASCADE, to='streampunk.SlotLength'),
        ),
        migrations.AddField(
            model_name='bundleroomassignment',
            name='toSlot',
            field=models.ForeignKey(help_text='The last slot for this assignment. The assignment can satisfy items that are in this slot.', on_delete=django.db.models.deletion.CASCADE, related_name='bundleroomto_set', to='streampunk.Slot'),
        ),
        migrations.AddField(
            model_name='bundleitemassignment',
            name='bundle',
            field=models.ForeignKey(help_text='The bundle assigned to the item', on_delete=django.db.models.deletion.CASCADE, to='streampunk.KitBundle'),
        ),
        migrations.AddField(
            model_name='bundleitemassignment',
            name='item',
            field=models.ForeignKey(help_text="The item we're assigning the thing to", on_delete=django.db.models.deletion.CASCADE, to='streampunk.Item'),
        ),
        migrations.AlterUniqueTogether(
            name='itemperson',
            unique_together=set([('item', 'person')]),
        ),
    ]

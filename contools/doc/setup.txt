SETTING UP STREAMPUNK
=====================
This file gives you some advice on how to set up a running instance
of streampunk. It's somewhat vague, because it depends on how your
system is configured.

REQUIREMENTS
============
Python 2.7
	At least, Streampunk has been developed with Python 2.7. It'll
	almost certainly work with earlier versions, as long as Django
	supports them, but 2.7 is what it's been tested with.

	Python 3.x is NOT supported.

Django 1.4
	Streampunk is a Django application.

Dajax 0.8.4
Dajaxice 0.2
	Dajaxice provides AJAX support. At time of writing, this isn't
	actually *used*, but the framework is referenced in settings.py,
	and in urls.py.

tables2
	Tables2 provides the support for easy-to-produce, sortable tables.
	I'm currently experimenting with this, but it's not fully in place
	yet.

A database
	You can use any of the databases supported by Django. I've been
	developing Streampunk using MySQL, using MySQL-python. Since
	Python includes sqlite3, you should be able to get away with
	that, for a local development.

A Webserver
	I've just been using Django's built-in developmental server. If
	you actually want to set up a real Streampunk system for your
	event, you'll have to deploy it to a real webserver, such as
	Apache running WSGI. Don't use mod_python; Django's deprecating
	support for it.

INSTALLATION
============
I'm somewhat baffled about how to create Django apps for distribution
at the moment, so you have to do some of the work yourself. Sorry about
that.

Creating the Framework
----------------------
Choose whichever directory you want to have your application in,
and then do:

$ django-admin.py startproject contools

This will create the following hierarchy of files:

contools/
	manage.py
	contools/
		settings.py
		urls.py


Do a git pull from github, or unpack your tarball, or whatever source
distribution you got. You should see this kind of hierarchy:

contools/
	manage.py
	reload_streampunk.sh
	setup_streampunk.sql
	contools/
		urls.py
	streampunk/
		models.py
		views.py
		forms.py

Notice how the two both have contools/manage.py, and contools/contools/urls.py,
but the Streampunk package has a streampunk subdirectory, and no settings.py.
That's because settings.py contains some local sensitive data that shouldn't
be distributed, and you don't want to base YOUR system on a version you've
pulled from the net...

So, copy the streampunk hierachy onto the one you've just created with
djang-admin.py, overwritings files like contools/urls.py.

Look at contools/contools/settings.py - this is where you configure the
database that Django will use. You should follow the Django documentation
for setting up your database. I use MySQL, but if you're just playing
around with this development release, you should be able to get away
with sqlite3. For example:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': '/Users/steve/progdb/sp.db',    # Or path to database file if using sqlite3.
        'USER': '',                             # Not used with sqlite3.
        'PASSWORD': '',                         # Not used with sqlite3.
        'HOST': '',                             # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                             # Set to empty string for default. Not used with sqlite3.
    }
}

(Use whatever path you want, to the file which will be your Streampunk database.)

Once you've saved settings.py, create your database, with the username and
password, if needed by your database back-end. If you're using sqlite3, then
you don't need to do this, because it'll be done in the next step for you.

Now you need to build the data models in the database. In the contools
directory (the one with manage.py), do this:

$ python manage.py syncdb --noinput

This will:
- Create all the necessary tables in your database.
- Populate the Streampunk database with an initial configuration for an
  event.

Assuming that this worked, now do:

$ python manage.py loaddata loaddata room person items tags avail kit

This populates the database with some initial details about some rooms,
items, people, etc. None of this is real - it's just so that you can
get a system up and running quickly. You can zap all the data later on,
and replace it with your own.

Finally, do:

$ python manage.py createsuperuser --user yourusername --email youraddr@example.com

This will create a superuser in the Streampunk database (and ONLY in the database;
this has nothing to do with permissions for the rest of your system), with the
username and email address you provide. You'll be prompted for a password, so
pick a new one.

All of this might seem a bit of a faff to you. So look at the files:
	contools/reload_streampunk.sh
	contools/setup_streampunk.sql

This is a small script and a fragment of SQL that does all of the above. I use
this for trashing the entire Streampunk database. rebuilding it from scratch,
and re-populating it with some basic working data. If you use something like
this, remember to change the usernames, passwords and (especially) email address.

(There's a little bit of flexibility at the start of the script - it reads your
contools/settings.py file to see what database backend you've used and where you've
put your database file. Remember, this trashes THE ENTIRE DATABASE, discarding all
the data, so obviously only use this while you're experimenting, and want to reset
everything. Which I do a lot.)

You should now have a Streampunk application ready in your database. To see what
you've built, do this:

$ python manage.py runserver

This will run Django's built-in development webserver. You can now point your
browser to:

http://localhost:8000/streampunk/main/

and you should see the front page of the Streampunk application. Which is
remarkably bland and dull. Try following the login link, and logging in
as the superuser you created above; you'll see more information once
you've done so, along with all the links.

Django's runserver is ONLY for development; it's not something you could deploy
a working Streampunk system on. To do that, you'll need to set up a proper
webserver which can run Django. To do that, please see the Django documentation.

The basic import of data populates rooms, items, people, etc., but doesn't
connect them very much. To do that, there's a file, streampunk/connect.py.
To use this, do:

$ python manage.py shell
>>> from streampunk.connect import connect_people
>>> connect_people()
>>> ^D
$

This will put people on items and assign tags to people and items. It's
a largely nonsensical assignment - it's just so that you can see how
data looks when it's connected up.

Email
-----
If you want to be able to send email, then you need a backend defined, in your
settings.py file:

# Full backend. The default is the SMTP backend.
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# It uses the follwowing settings:
#
# EMAIL_HOST = 'smtp.isp.co.uk'
# EMAIL_POST = 25
# EMAIL_HOST_USER = 'someone'
# EMAIL_HOST_PASSWORD = 'secret'
# EMAIL_USE_TLS = False
#
# For testing, we have the console backend, instead.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

The default backend is the smtp backend, but you'll need to set EMAIL_HOST, at least,
in order to tell Django where to send the email (The default is 'localhost').

If you want to test email, use the console backend; that'll cause all emails to be
written to stdout instead of being sent, so you can see what's being sent.
